<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.17 (Pod::Simple 3.10, Perl::Tidy 20071205) on 2009-12-02 08:38:50 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2009 Perl Advent Calendar: New Winter Spectator Sport - Thongs &amp; Toboggans</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="TCA.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2009-12</a>-02</h1>
<h2 align="center">New Winter Spectator Sport - Thongs &amp; Toboggans</h2>
<h3 align="center">by Bill 'N1VUX' Ricker</h3>
<p>I have confessed previously to using Perl to cheat at the <a href="http://www.google.com/search?q=wesun+puzzlemaster+site%3Anpr.org">NPR Sunday Puzzle</a>. Some of my successes were not elegant, for instance my original solution for</p>
<blockquote><p>Think of a familiar 9-letter word, in which the first letter immediately follows the 9th in the alphabet. The 2nd letter immediately follows the 8th in the alphabet. The 3rd immediately follows the 7th, and the 4th immediately follows the 6th.</p>
<p>For example: SPECTATOR (S follows R, and P follows O). Unfortunately, the pattern breaks down with the remaining letters.</p>
<p>Hint: The word is used most often in the TV and film industry.</p>
<p>What word is it?</p>
<p>-- WESun Puzzlemaster Challenge, 2002-10-20 </p>
</blockquote>
<p>required explicit looping with indices, looks like C or Fortran.</p>
<p>Modules such as <tt><a href="http://search.cpan.org/perldoc?Tie::CharArray">Tie::CharArray</a></tt> <tt><a href="http://search.cpan.org/perldoc?List::Util">List::Util</a></tt> and <tt><a href="http://search.cpan.org/perldoc?List::MoreUtils">List::MoreUtils</a></tt> <sup><a href="#footnote_allu">1</a></sup> can modernize the code nicely. <tt>Tie::CharArray</tt> provides <tt><span class="k">tie</span> <span class="k">my</span> <span class="i">@C</span><span class="cm">,</span> <span class="q">&#39;Tie::CharArray&#39;</span><span class="cm">,</span> <span class="i">$_</span><span class="sc">;</span></tt> to alias the chars of the string, such that array elements assigned to change the string, so better than <tt><span class="k">split</span> <span class="q">&quot;&quot;</span></tt> for some uses. The <tt><span class="i">chars</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span> <span class="i">codes</span><span class="s">(</span><span class="s">)</span></tt> forms are shorthand and in a <tt><span class="k">for</span> <span class="s">(</span><span class="i">chars</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="s">)</span></tt> loop still aliases. Here I am using <tt><span class="i">codes</span><span class="s">(</span><span class="s">)</span></tt> to replace <tt><span class="k">map</span> <span class="s">{</span><span class="k">ord</span><span class="s">}</span> <span class="k">split</span></tt>. Likewise from <tt><span class="w">reduce</span> <span class="s">{</span><span class="s">}</span> <span class="w">pairwise</span> <span class="s">{</span><span class="s">}</span></tt> to replace explicit loop logic <sup><a href="#footnote_slow">2</a></sup>.</p>
<pre><span class="c">3 bethesda
4 offscreen
3 thongs
3 toboggans
3 tuffets
3 tumults</span></pre>
<a name="mod02.pl" id="mod02.pl"></a><h2><a href="mod02.pl">mod02.pl</a></h2><pre>
   1 #! perl -ls
   2 
   3 <span class="k">use</span> <span class="w">Tie::CharArray</span> <span class="q">qw/chars codes/</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">List::Util</span> <span class="q">qw/reduce max/</span><span class="sc">;</span>
   5 <span class="k">use</span> <span class="w">List::MoreUtils</span> <span class="q">qw/pairwise/</span><span class="sc">;</span>
   6 
   7 <span class="k">my</span> <span class="i">$m</span>        = <span class="i">$count</span> || <span class="k">shift</span> || <span class="n">3</span><span class="sc">;</span>
   8 <span class="k">my</span> <span class="i">$filename</span> = <span class="i">$fn</span>    || <span class="k">shift</span> || <span class="q">&quot;enable1.txt&quot;</span><span class="sc">;</span>
   9 <span class="i">$length</span> ||= <span class="n">2</span> * <span class="i">$m</span><span class="sc">;</span>    <span class="c">## Strictly puzzle  calls for eq 9</span>
  10 
  11 <span class="k">open</span> <span class="k">my</span> <span class="i">$DICT</span><span class="cm">,</span> <span class="i">$filename</span> <span class="k">or</span> <span class="k">die</span> <span class="q">&quot;file open $filename $! &quot;</span><span class="sc">;</span>
  12 
  13 <span class="k">while</span> <span class="s">(</span><span class="q">&lt;$DICT&gt;</span><span class="s">)</span> <span class="s">{</span>
  14     <span class="k">chop</span> <span class="k">while</span> <span class="q">/\s/</span><span class="sc">;</span>
  15     <span class="k">next</span> <span class="k">if</span> <span class="k">length</span><span class="s">(</span><span class="s">)</span> &lt; <span class="i">$length</span> <span class="k">or</span> <span class="q">/^[A-Za]/</span> <span class="k">or</span> <span class="q">/\W/</span><span class="sc">;</span>    <span class="c">#impossible</span>
  16     <span class="k">my</span> <span class="i">@N</span>  = <span class="i">codes</span><span class="s">(</span><span class="i">$_</span><span class="s">)</span><span class="sc">;</span> 
  17     <span class="k">my</span> <span class="i">@RN</span> = <span class="k">reverse</span> <span class="i">@N</span><span class="sc">;</span>
  18 
  19     <span class="k">my</span> <span class="i">$match</span> = <span class="s">(</span>
  20         <span class="i">reduce</span> <span class="s">{</span>
  21             !<span class="i">$a</span>-&gt;[<span class="n">-1</span>]
  22               ? <span class="i">$a</span>
  23               <span class="co">:</span> <span class="s">[</span> <span class="i">$a</span>-&gt;[<span class="n">0</span>] + <span class="i">$b</span><span class="cm">,</span> <span class="i">$b</span> <span class="s">]</span><span class="sc">;</span>
  24         <span class="s">}</span>
  25         <span class="s">[</span> <span class="n">0</span><span class="cm">,</span> <span class="n">1</span> <span class="s">]</span><span class="cm">,</span>    <span class="c"># inject total zero, continue one</span>
  26         <span class="i">pairwise</span> <span class="s">{</span> <span class="s">(</span> <span class="i">$a</span> - <span class="i">$b</span> <span class="s">)</span> == <span class="n">1</span> <span class="s">}</span> <span class="i">@N</span><span class="cm">,</span>
  27         <span class="i">@RN</span>
  28     <span class="s">)</span>-&gt;[<span class="n">0</span>]<span class="sc">;</span>
  29 
  30     <span class="k">print</span> <span class="q">&quot;$match $_&quot;</span> <span class="k">if</span> <span class="i">$match</span> &gt;= <span class="i">$m</span><span class="sc">;</span>
  31 
  32 <span class="s">}</span>
  33 <span class="k">close</span> <span class="w">DICT</span><span class="sc">;</span>
  34 
</pre>
<p><a name="footnote_allu" id="footnote_allu"></a>1. <tt><a href="http://search.cpan.org/perldoc?List::AllUtils">List::AllUtils</a></tt> combines <tt>List::Util</tt> and <tt>List::MoreUtils</tt>, though it's a bit of a misnomer because it excludes <tt><a href="http://search.cpan.org/perldoc?List::EvenMoreUtils">List::EvenMoreUtils</a></tt>.<br>
</p>
<p><a name="footnote_slow" id="footnote_slow"></a>2. Normally one expects implicit loops to be faster than <tt><span class="k">for</span><span class="s">(</span><span class="i">@A</span><span class="s">)</span></tt> loops than <tt><span class="k">for</span><span class="s">(</span><span class="i">$i</span>=<span class="sc">;</span><span class="sc">;</span><span class="s">)</span></tt> loops, but here the copying for reverse etc defeat the speed-up, it runs 2-3x slower.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="TCA.pod">View Source (POD)</a></div><br />
</body>
</html>
