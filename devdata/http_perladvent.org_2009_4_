<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.18 (Pod::Simple 3.10, Perl::Tidy 20090616) on 2009-12-06 17:01:27 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2009 Perl Advent Calendar: Let it go, let it go, let it go</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod4.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2009-12</a>-04</h1>
<h2 align="center">Let it go, let it go, let it go</h2>
<h3 align="center">by Bill 'N1VUX' Ricker</h3>
<p>Maybe you have got an annual data load that, like Santa's annual child census update, that takes quite a while to process a slew of files from various sources, and the cpu and disk lights are not in your cube so you can't see progress. And should it fail, you'd like to restart close to where it failed.</p>
<p>While you could use <tt><a href="http://search.cpan.org/perldoc?Term::ProgressBar">Term::ProgressBar</a></tt> or some explicit state variables <sup><a href="#footnote_state">1</a></sup>, if we build it with <tt><a href="http://search.cpan.org/perldoc?Every">Every</a></tt> module's iterator <tt><span class="i">every</span><span class="s">(</span><span class="n">6</span><span class="s">)</span></tt> that returns <tt><span class="s">(</span> <span class="s">(</span><span class="k">undef</span><span class="s">)</span><span class="n">x5</span> <span class="cm">,</span> <span class="n">1</span><span class="s">)</span>...</tt>, we have total control and can use the <tt><span class="i">every</span><span class="s">(</span><span class="w">seconds</span>=&gt;<span class="n">999</span><span class="p">)</span></tt> function to also handle having regular-in-time snap backups to create recovery points for the long load sequence. <tt>Every</tt> is totally different from <a href="../../2007/25/">Time::Out</a>, which does multiple alarms, as <tt>Every</tt> goes in an event loop.</p>
<p>It can be used as</p>
<pre>
<span class="i">$dbh</span><span class="i">-&gt;commit</span> <span class="k">if</span> <span class="i">every</span><span class="s">(</span><span class="n">100</span><span class="s">)</span><span class="sc">;</span>
<span class="i">CopyToRecoverySite</span><span class="s">(</span><span class="s">)</span> <span class="k">if</span> <span class="i">every</span><span class="s">(</span><span class="w">seconds</span><span class="cm">=&gt;</span><span class="n">3600</span><span class="s">)</span><span class="sc">;</span>
</pre>

<p>Installation only has one dependency issue<sup><a href="#footnote_install">2</a></sup>.</p>
<p>In a test</p>
<pre>
   1 <span class="k">use</span> <span class="n">5.010</span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">Every</span><span class="sc">;</span>
   3 
<a name="sing"></a>   4 <span class="k">sub </span><span class="m">sing</span> <span class="s">{</span> <span class="k">say</span> <span class="i">@_</span><span class="sc">;</span> <span class="s">}</span>
   5 <span class="k">while</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">{</span>
   6     <span class="w">state</span> <span class="i">$_iter</span><span class="sc">;</span>
   7     <span class="k">print</span> ++<span class="i">$_iter</span><span class="cm">,</span> <span class="q">&quot;\t&quot;</span><span class="sc">;</span>
   8     <span class="k">given</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">{</span>
   9 
  10         <span class="k">when</span> <span class="s">(</span> <span class="i">every</span><span class="s">(</span><span class="n">5</span><span class="s">)</span> | <span class="i">every</span><span class="s">(</span><span class="n">6</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span> <span class="i">sing</span><span class="s">(</span><span class="q">&quot;Merry Christmas!!&quot;</span><span class="s">)</span> <span class="s">}</span>
  11         <span class="k">when</span> <span class="s">(</span> <span class="i">every</span><span class="s">(</span><span class="n">8</span><span class="s">)</span> <span class="s">)</span>            <span class="s">{</span> <span class="i">sing</span><span class="s">(</span><span class="q">&quot;On Dasher!&quot;</span><span class="s">)</span> <span class="s">}</span>
  12         <span class="i">default</span>                      <span class="s">{</span> <span class="i">sing</span><span class="s">(</span><span class="q">&quot;Ho, Ho, Ho!&quot;</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span>
  13     <span class="s">}</span>
  14     <span class="k">sleep</span> <span class="n">1</span><span class="sc">;</span>
  15 <span class="s">}</span>
</pre>

<p>we find that <tt>On Dasher!</tt> is scarcer than expected, as it does not count passes where the line is skipped when printing <tt>Merry Christmas!!</tt>. <sup><a href="#footnote_or">3</a></sup></p>
<p>So for Santa loading census updates, we'd like to see progress like</p>
<pre><span class="c">....v....x....v....x....v....x....v....x....v....x....v....x....v....x....v....x
....v....x....v....x....v....x....v....x....v....x....v....x....v....x....v....x
....v....x....v....x....v....x....v....x....v....x.
backup @ Thu Dec  3 22:22:06 2009
...v....x....v....x....v....x</span></pre>
<p>with one dot every 100 files, roman v and x for 5th and 10th dots.<sup><a href="#footnote_roman">4</a></sup></p>
<a name="mod4.pl" id="mod4.pl"></a><h2><a href="mod4.pl">mod4.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">constant</span> <span class="s">{</span>
   2     <span class="w">N</span>    <span class="cm">=&gt;</span> <span class="n">100</span><span class="cm">,</span>     <span class="c"># number passees between progress dots</span>
   3     <span class="w">COLS</span> <span class="cm">=&gt;</span> <span class="n">80</span><span class="cm">,</span>      <span class="c"># how many wide on progress</span>
   4     <span class="w">HOUR</span> <span class="cm">=&gt;</span> <span class="n">3600</span><span class="cm">,</span>    <span class="c"># magic number, seconds per hour</span>
   5 <span class="s">}</span><span class="sc">;</span>
   6 <span class="k">use</span> <span class="w">Every</span><span class="sc">;</span>
   7 
   8 <span class="k">while</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">{</span>
   9     <span class="n">1</span><span class="sc">;</span>               <span class="c"># .... load files in input stream here ...</span>
  10 <span class="s">}</span>
  11 <span class="k">continue</span> <span class="s">{</span>
  12 
  13     <span class="c"># Progress</span>
  14     <span class="k">print</span><span class="s">(</span>
  15         <span class="s">(</span>
  16             <span class="i">every</span><span class="s">(</span><span class="n">5</span><span class="s">)</span>
  17             ? <span class="s">(</span> <span class="i">every</span><span class="s">(</span><span class="n">2</span><span class="s">)</span> ? <span class="q">q(x)</span> <span class="co">:</span> <span class="q">q(v)</span> <span class="s">)</span> <span class="c"># 5*2=10 </span>
  18             <span class="co">:</span> <span class="q">&#39;.&#39;</span>
  19         <span class="s">)</span><span class="cm">,</span>
  20         <span class="s">(</span> <span class="i">every</span><span class="s">(</span><span class="w">COLS</span><span class="s">)</span> ? <span class="q">&quot;\n&quot;</span> <span class="co">:</span> <span class="q">q()</span> <span class="s">)</span>
  21     <span class="s">)</span> <span class="k">if</span> <span class="i">every</span><span class="s">(</span><span class="w">N</span><span class="s">)</span><span class="sc">;</span>
  22 
  23     <span class="i">backup_incremental</span><span class="s">(</span><span class="s">)</span>
  24       <span class="k">and</span> <span class="k">print</span><span class="s">(</span> <span class="q">&quot;\nbackup \@ &quot;</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">localtime</span><span class="cm">,</span> <span class="q">&quot;\n&quot;</span> <span class="s">)</span>
  25       <span class="k">if</span> <span class="i">every</span><span class="s">(</span> <span class="w">seconds</span> <span class="cm">=&gt;</span> <span class="w">HOUR</span> <span class="s">)</span> <span class="sc">;</span>
  26 <span class="s">}</span>
  27 
  28 <span class="k">exit</span><span class="sc">;</span>
<a name="backup_incremental"></a>  29 <span class="k">sub </span><span class="m">backup_incremental</span> <span class="s">{</span> <span class="n">1</span> <span class="s">}</span>
</pre>
<blockquote><p>Thank you to David Westbrook for input today.</p>
</blockquote>
<p><a name="footnote_state" id="footnote_state"></a>1. With the 'new' <a href="../../2007/19/">Perl 5.10 Xmas 2007</a> State variables <tt><span class="k">use</span> <span class="w">feature</span> <span class="q">&#39;state&#39;</span><span class="sc">;</span> <span class="w">state</span> <span class="i">$_n</span><span class="sc">;</span></tt> you no longer need closures or global variables to do this yourself.<br>
</p>
<p><a name="footnote_install" id="footnote_install"></a>2. Note that prerequisite <tt><a href="http://search.cpan.org/perldoc?Devel::Callsite">Devel::Callsite</a></tt> 0.04 fails automated install. It has test problems. We had to do a <tt>force notest install</tt>.<br>
</p>
<p><a name="footnote_or" id="footnote_or"></a>3. And hence <tt><span class="i">every</span><span class="s">(</span><span class="n">2</span><span class="s">)</span>||<span class="i">every</span><span class="s">(</span><span class="n">3</span><span class="s">)</span></tt> is not what you think, since the lazy eval of <tt>||</tt> will call <tt><span class="i">every</span><span class="s">(</span><span class="n">3</span><span class="s">)</span></tt> half as often as expected; coercion of undef to 0 makes <tt><span class="i">every</span><span class="s">(</span><span class="n">2</span><span class="s">)</span>|<span class="i">every</span><span class="s">(</span><span class="n">3</span><span class="s">)</span></tt> as one expects.<br>
</p>
<p><a name="footnote_roman" id="footnote_roman"></a>4. could use <tt>ccccDccccM</tt> for true roman counting :-) but that ties the print chars to the divisors.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod4.pod">View Source (POD)</a></div><br />
</body>
</html>
