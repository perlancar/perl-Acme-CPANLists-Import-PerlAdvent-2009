<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.18 (Pod::Simple 3.10, Perl::Tidy 20090616) on 2009-12-20 05:37:15 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2009 Perl Advent Calendar: The children were smartly dressed in matching attire for the holidays</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod19.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2009-12</a>-19</h1>
<h2 align="center">The children were smartly dressed in matching attire for the holidays</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>Even though Santa's still stuck in the days of Perl 5.6, he too can have a little Perl 6 for Christmas with the magic of <tt><a href="http://search.cpan.org/perldoc?Match::Smart">Match::Smart</a></tt>. With <tt>Match::Smart</tt> you get a a function called <tt><span class="i">smart_match</span><span class="s">(</span><span class="s">)</span></tt>&mdash;instead of a <tt>~~</tt> operator&mdash;for all sorts of DWIMy equality testing. With it, we can implement a simple switch statement in our sample code to assign gifts based on kids' behavior:</p>
<pre><span class="c">nick@north# perl mod19.pl
Bob gets a pony
Zack gets a lump of coal
Jerrad gets a pair of socks
Eve gets a lump of coal
Alice gets a pony</span></pre>
<p>Just for fun, Santa decided to try to run the Perl 5.10.0 tests for <tt>~~</tt> with <tt><span class="i">smart_match</span><span class="s">(</span><span class="s">)</span></tt> and found that it passed 109 of 144 tests<sup><a href="#footnote_test">1</a></sup>. Not bad, but he noticed some patterns and after reading the documentation more carefully he discovered that many of the failures were due to the fact that the module had been written against <a href="http://www.perl.com/pub/a/2002/01/15/apo4.html?page=2#table%201:%20matching%20a%20switch%20value%20against%20a%20case%20value">Apocalypse 4</a> which debuted in 2002, and the relevant specification has since been superseded by <a href="http://perlcabal.org/syn/S03.html#Smart_matching">Synopsis 3</a>.</p>
<p>After consulting <a href="http://perldoc.perl.org/perlsyn.html#Smart-matching-in-detail">perlsyn</a> and making a few simple changes<sup><a href="#footnote_patch">2</a></sup>, he was able to get an <a href="Smart.pm">updated </a><tt>Smart.pm</tt> that only failed 5 tests:</p>
<pre><span class="c">nick@north# perl -Mlib=lib smartmatch_.t | & grep not
not ok 5 - smart_match(\&foo, \&bar): 2
not ok 89 - smart_match([qw(1foo 2bar)], "2"): 1
not ok 90 - smart_match("2", [qw(1foo 2bar)]): 1
not ok 99 - smart_match(2, "2bananas"): 1
not ok 100 - smart_match("2bananas", 2): 1</span></pre>
<p>The first failed test seems reasonable enough, since the tests are run in pairs, each with the operands in opposite order and of course <tt><span class="i">&amp;foo</span><span class="s">(</span>\<span class="i">&amp;bar</span><span class="s">)</span></tt> is different from <tt><span class="i">&amp;bar</span><span class="s">(</span>\<span class="i">&amp;foo</span><span class="s">)</span></tt>.<sup><a href="#footnote_commutative">3</a></sup></p>
<p>The other tests fail due to an apparent inconsistency in Perl 5.10. The tests are written to expect an <span style="font-style: italic">inability</span> to match, even though <tt><span class="n">2</span> == <span class="q">&quot;2bananas&quot;</span></tt> and <tt><span class="q">&quot;2&quot;</span> == <span class="q">&quot;2bar&quot;</span></tt><sup><a href="#footnote_numish">4</a></sup>. So, with <tt>Match::Smart</tt> you get a more useful tool than the native feature in 5.10.</p>
<p>Indeed, even though the operand table for (the updated) <tt>Match::Smart</tt> is more difficult to read than that of Perl 5.10, it also specifies an interesting behavior for objects:</p>
<pre><span class="c">   OBJECT   STRING   $val1->can($val2) && $val1->$val2</span></pre>
<p>i.e; smart match of an object and a string will invoke the object's method specified by the value of the string if available. Perl 5.10 on the other hand requires that <tt>~~</tt> be overloaded to get any behavior beyond what is defined for arrays, hashes, scalars and regexps.</p>
<p>One of the handy things about smart matching, is that it ignores one level of referencing so that <tt>\<span class="i">@a</span> ~~ <span class="i">@a</span></tt> is true, which could&mdash;for instance&mdash;allow you to handle subroutine arguments of greater variety with less code. Of course, since <tt><span class="i">smart_match</span><span class="s">(</span><span class="i">@goodboys</span><span class="cm">,</span> <span class="i">@badboys</span><span class="s">)</span></tt> doesn't work quite the same as <tt><span class="i">@goodboys</span> ~~ <span class="i">@badboys</span></tt> since the arrays are flattened into a single list, you should instead pass referenced arguments like <tt><span class="i">smart_match</span><span class="s">(</span>\<span class="i">@goodboys</span><span class="cm">,</span> \<span class="i">@badboys</span><span class="s">)</span></tt>.<sup><a href="#footnote_prototype">5</a></sup></p>
<a name="mod19.pl" id="mod19.pl"></a><h2><a href="mod19.pl">mod19.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">Match::Smart</span> <span class="q">&#39;:all&#39;</span><span class="sc">;</span>
   2 
   3 <span class="k">my</span> <span class="i">%kids</span> = <span class="s">(</span> <span class="w">Alice</span><span class="cm">=&gt;</span><span class="q">&#39;nice&#39;</span><span class="cm">,</span> <span class="w">Bob</span><span class="cm">=&gt;</span><span class="q">&#39;good&#39;</span><span class="cm">,</span> <span class="w">Eve</span><span class="cm">=&gt;</span><span class="q">&#39;bad&#39;</span><span class="cm">,</span> <span class="w">Jerrad</span><span class="cm">=&gt;</span><span class="q">&#39;???&#39;</span><span class="cm">,</span> <span class="w">Zack</span><span class="cm">=&gt;</span><span class="q">&#39;naughty&#39;</span><span class="s">)</span><span class="sc">;</span>
   4 
   5 <span class="k">printf</span><span class="s">(</span><span class="q">&quot;%s gets a %s\n&quot;</span><span class="cm">,</span> <span class="i">$_</span><span class="cm">,</span> <span class="i">gift</span><span class="s">(</span><span class="i">$kids</span>{<span class="i">$_</span>}<span class="s">)</span> <span class="s">)</span> <span class="k">foreach</span> <span class="k">keys</span> <span class="i">%kids</span><span class="sc">;</span>
   6 
<a name="gift"></a>   7 <span class="k">sub </span><span class="m">gift</span><span class="s">{</span>
   8   <span class="k">my</span> <span class="i">$behavior</span> = <span class="k">shift</span><span class="sc">;</span>
   9 
  10   <span class="k">given</span> <span class="i">$behavior</span> <span class="cm">=&gt;</span> <span class="k">sub</span> <span class="s">{</span>
  11     <span class="k">when</span> <span class="s">[</span><span class="q">qw/good nice/</span><span class="s">]</span>    <span class="cm">=&gt;</span> <span class="k">sub</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;pony&quot;</span> <span class="s">}</span><span class="sc">;</span>
  12     <span class="k">when</span> <span class="s">[</span><span class="q">qw/bad naughty/</span><span class="s">]</span>  <span class="cm">=&gt;</span> <span class="k">sub</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;lump of coal&quot;</span> <span class="s">}</span><span class="sc">;</span>
  13     <span class="k">default</span> <span class="k">sub</span> <span class="s">{</span> <span class="k">return</span> <span class="q">&quot;pair of socks&quot;</span> <span class="s">}</span><span class="sc">;</span> <span class="c">#sub is optional</span>
  14   <span class="s">}</span>
  15 <span class="s">}</span>
</pre>
<p><a name="footnote_test" id="footnote_test"></a>1. This required a few modifications to <tt>op/smartmatch.t</tt> though:<br>
<a name="smartmatch_t.patch" id="smartmatch_t.patch"></a><h2><a href="smartmatch_t.patch">smartmatch_t.patch</a></h2><pre>
   1 --- <span class="w">perl</span>-<span class="v">5.10.0</span>/<span class="w">t</span>/<span class="w">op</span>/<span class="w">smartmatch</span>.<span class="w">t</span>	<span class="n">2007</span>-<span class="n">12</span>-<span class="n">18</span> <span class="n">05</span><span class="co">:</span><span class="n">47</span><span class="co">:</span><span class="n">08.000000000</span> -<span class="n">0500</span>
   2 +++ <span class="w">smartmatch_</span>.<span class="w">t</span>	<span class="n">2009</span>-<span class="n">12</span>-<span class="n">19</span> <span class="n">20</span><span class="co">:</span><span class="n">52</span><span class="co">:</span><span class="n">26.000000000</span> -<span class="n">0500</span>
   3 <span class="i">@@</span> -<span class="n">1</span><span class="cm">,</span><span class="n">8</span> +<span class="n">1</span><span class="cm">,</span><span class="n">8</span> <span class="i">@@</span>
   4  <span class="c">#!./perl</span>
   5  
   6  <span class="k">BEGIN</span> <span class="s">{</span>
   7 -    <span class="k">chdir</span> <span class="q">&#39;t&#39;</span><span class="sc">;</span>
   8 -    <span class="i">@INC</span> = <span class="q">&#39;../lib&#39;</span><span class="sc">;</span>
   9 +<span class="c">#    chdir &#39;t&#39;;</span>
  10 +<span class="c">#    @INC = &#39;../lib&#39;;</span>
  11      <span class="k">require</span> <span class="q">&#39;./test.pl&#39;</span><span class="sc">;</span>
  12  <span class="s">}</span>
  13  <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
  14 <span class="i">@@</span> -<span class="n">10</span><span class="cm">,</span><span class="n">6</span> +<span class="n">10</span><span class="cm">,</span><span class="n">8</span> <span class="i">@@</span>
  15  <span class="k">use</span> <span class="w">Tie::Array</span><span class="sc">;</span>
  16  <span class="k">use</span> <span class="w">Tie::Hash</span><span class="sc">;</span>
  17  
  18 +<span class="k">eval</span> <span class="q">&quot;use Match::Smart &#39;smart_match&#39;&quot;</span> <span class="k">unless</span> <span class="i">$]</span> &gt;= <span class="n">5.009</span><span class="sc">;</span>
  19 +
  20  <span class="c"># The feature mechanism is tested in t/lib/feature/smartmatch:</span>
  21  <span class="c"># This file tests the semantics of the operator, without worrying</span>
  22  <span class="c"># about feature issues such as scoping etc.</span>
  23 <span class="i">@@</span> -<span class="n">45</span><span class="cm">,</span><span class="n">10</span> +<span class="n">47</span><span class="cm">,</span><span class="n">12</span> <span class="i">@@</span>
  24      <span class="k">die</span> <span class="q">&quot;Bad test spec: ($yn, $left, $right)&quot;</span>
  25  	<span class="k">unless</span> <span class="i">$yn</span> <span class="k">eq</span> <span class="q">&quot;&quot;</span> || <span class="i">$yn</span> <span class="k">eq</span> <span class="q">&quot;!&quot;</span><span class="sc">;</span>
  26      
  27 -    <span class="k">my</span> <span class="i">$tstr</span> = <span class="q">&quot;$left ~~ $right&quot;</span><span class="sc">;</span>
  28 +    <span class="c">#Bor-fackwards compatability</span>
  29 +    <span class="k">my</span> <span class="i">$tstr</span> = <span class="i">$]</span> &gt;= <span class="n">5.009</span> ? <span class="q">&quot;$left ~~ $right&quot;</span> <span class="co">:</span> <span class="q">&quot;smart_match($left, $right)&quot;</span><span class="sc">;</span>
  30      
  31      <span class="k">my</span> <span class="i">$res</span><span class="sc">;</span>
  32 -    <span class="i">$res</span> = <span class="k">eval</span> <span class="i">$tstr</span> // <span class="q">&quot;&quot;</span><span class="sc">;</span>	<span class="c">#/ &lt;- fix syntax colouring</span>
  33 +    <span class="i">$res</span> = <span class="k">eval</span> <span class="i">$tstr</span> || <span class="q">&quot;&quot;</span><span class="sc">;</span>	<span class="c">#/ &lt;- fix syntax colouring</span>
  34 +                      <span class="c">#         No defined-or joy for us in Obsolete-ville</span>
  35  
  36      <span class="k">die</span> <span class="i">$@</span> <span class="k">if</span> <span class="i">$@</span> <span class="k">ne</span> <span class="q">&quot;&quot;</span><span class="sc">;</span>
  37      <span class="i">ok</span><span class="s">(</span> <span class="s">(</span><span class="i">$yn</span> =~ <span class="q">/!/</span> <span class="k">xor</span> <span class="i">$res</span><span class="s">)</span><span class="cm">,</span> <span class="q">&quot;$tstr: $res&quot;</span><span class="s">)</span><span class="sc">;</span>
</pre>
</p>
<p><a name="footnote_patch" id="footnote_patch"></a>2. Santa's <a href="Smart_pm.patch">patch</a> includes corrections for the following changes between Apocalypse 4 and Synopsis 3:
<ul>
<li>hash-hash key intersection &rarr; hash keys equality</li>
<li>array-array intersection &rarr; array equality</li>
<li>hash slice element truth &rarr; hash slice element existence</li>
<li>array indexed value truth &rarr; array contains matching element</li></ul>
and requires a <a href="smart_match.t">modified test</a> to get to only 5 failures.<br>
</p>
<p><a name="footnote_commutative" id="footnote_commutative"></a>3. Somehow, the test passes in 5.10 though&hellip;<br>
</p>
<p><a name="footnote_numish" id="footnote_numish"></a>4. Numerical operations in Perl treat strings that begin with numbers as the leading number. This is why <tt><span class="s">(</span><span class="q">&quot;0 but true&quot;</span> &amp;&amp; <span class="q">&quot;0 but true&quot;</span> == <span class="n">0</span><span class="s">)</span> == <span class="n">1</span></tt>.<br>
</p>
<p><a name="footnote_prototype" id="footnote_prototype"></a>5. It's possible to get a <tt><span class="w">smart_match</span></tt> that <span style="font-style: italic">will</span> accept two arrays with prototypes, but <tt><span class="w">smart_match</span></tt> also needs to accept two hashes, a hash and an array, a hash and a scalar, etc.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod19.pod">View Source (POD)</a></div><br />
</body>
</html>
