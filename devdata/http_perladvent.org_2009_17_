<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.18 (Pod::Simple 3.10, Perl::Tidy 20090616) on 2009-12-17 23:41:02 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2009 Perl Advent Calendar: Merry DBIx::Class!</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod17.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2009-12</a>-17</h1>
<h2 align="center">Merry DBIx::Class!</h2>
<h3 align="center">by Yanick Champoux</h3>
<p>Gluggag&aelig;gir, <a href="../../2008/13/">let us recall</a>, is an IT elf who moved into Q&A after last season, a decision that right now make him very sad. You see, the project he's been put on is <a href="../../2008/5/">Santa's ChildrenDB application</a> which&mdash;I'm ashamed to report&mdash;has gotten quite bad.</p>
<p>For one the application's interface to the database is a mess. An ugly quagmire, a pathetic excuse of an API. Its guts are bloated, convoluted and impossible to read. Truly the type of coding horror that makes baby seals cry.</p>
<p>Worse still, it runs on a costly database system mandated by the hefty load of the app in production. But did Glugg get a second copy for testing? Of course not! Marketing gets leather chairs and unicorn barbeques, but he's stuck working on a popcorn string budget.</p>
<p>But wait! Glugg remembered that North Pole Mongers presentation about all things <tt><a href="http://search.cpan.org/perldoc?DBIx::Class">DBIx::Class</a></tt>. Inspired, he plopped on his chair and began to type real fast:</p>
<pre>
<span class="k">use</span> <span class="w">DBIx::Class::Schema::Loader</span> <span class="q">qw/ make_schema_at /</span><span class="sc">;</span>

<span class="i">make_schema_at</span><span class="s">(</span>
    <span class="q">&#39;ChildrenDB::Schema&#39;</span><span class="cm">,</span>
    <span class="s">{</span> <span class="w">debug</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">dump_directory</span> <span class="cm">=&gt;</span> <span class="q">&#39;./lib&#39;</span> <span class="s">}</span><span class="cm">,</span>
    <span class="s">[</span> <span class="q">&#39;dbi:HoHoHoracle:ChildrenDB,&#39;</span><span class="w">santa</span><span class="q">&#39;,&#39;</span><span class="w">c00k13s</span><span class="q">&#39; ],</span>
<span class="q">);</span>
</pre>

<p>Et voil&agrave;! In a flash he has generated Dozens of modules&mdash;one for each table. Blissfully, he can now play with the database using code that would be simple, sweet and palatable.</p>
<p>But an interface, as splendid as it might be, is all but useless if there is no database to connect to. So Glugg decided to create a duplicate testing db, which brings us to script number two:</p>
<pre>
<span class="k">use</span> <span class="w">lib</span> <span class="q">qw/ lib /</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">ChildrenDB::Schema</span><span class="sc">;</span>

<span class="k">my</span> <span class="i">$schema</span> = <span class="w">ChildrenDB::Schema</span><span class="w">-&gt;connect</span><span class="s">(</span> 
                <span class="q">&#39;dbi:SQLite:dbname=childrendb.sqlite&#39;</span> <span class="s">)</span><span class="sc">;</span>

<span class="i">$schema</span><span class="i">-&gt;deploy</span><span class="sc">;</span>
</pre>

<p>Huzzah! Glugg was now the proud owner of a clone of ChildrenDB. One that would run as long as the slope isn't too steep. Still 'twas better than nothing (and almost as cheap).</p>
<p>Already a fairly happy hacker since his mission was no longer doomed to be a flop, inspiration struck again and he saw how to add a cherry on top:</p>
<pre>
<span class="k">use</span> <span class="w">lib</span> <span class="q">qw/ lib /</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">ChildrenDB::Schema</span><span class="sc">;</span>
<span class="k">use</span> <span class="w">SQL::Translator</span><span class="sc">;</span>

<span class="k">my</span> <span class="i">$schema</span> = <span class="w">ChildrenDB::Schema</span><span class="w">-&gt;connect</span><span class="s">(</span> 
    <span class="q">&#39;dbi:SQLite:dbname=childrendb.sqlite&#39;</span><span class="cm">,</span>
<span class="s">)</span><span class="sc">;</span>

<span class="w">SQL::Translator</span><span class="w">-&gt;new</span><span class="s">(</span>
    <span class="w">parser</span> <span class="cm">=&gt;</span> <span class="q">&#39;SQL::Translator::Parser::DBIx::Class&#39;</span><span class="cm">,</span>
    <span class="w">parser_args</span> <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">package</span> <span class="cm">=&gt;</span> <span class="i">$schema</span> <span class="s">}</span><span class="cm">,</span>

    <span class="w">to</span> <span class="cm">=&gt;</span> <span class="q">&#39;GraphViz&#39;</span><span class="cm">,</span>
    <span class="w">producer_args</span> <span class="cm">=&gt;</span> <span class="s">{</span> <span class="w">out_file</span> <span class="cm">=&gt;</span> <span class="q">&#39;childrendb.png&#39;</span> <span class="s">}</span><span class="cm">,</span>
<span class="s">)</span><span class="i">-&gt;translate</span><span class="sc">;</span>
</pre>

<p>With those lines was produced a nice diagram of all the db's tables and keys. A true treasure map, a gold mine of insight that would save Glugg from many a pitfall!</p>
<p>This is where our story reaches its happy ending. Glugg still has work to do, but for now we'll leave it at that. Let's just give three cheers to the li'l elf who built an API, a database and a diagram in five minutes flat!</p>
<div style="float: right; font-size: 10pt"><a href="mod17.pod">View Source (POD)</a></div><br />
</body>
</html>
