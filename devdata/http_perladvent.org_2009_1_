<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.18 (Pod::Simple 3.10, Perl::Tidy 20090616) on 2009-12-06 17:03:25 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2009 Perl Advent Calendar: Not a creature was stirring&hellip;</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod1.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2009-12</a>-01</h1>
<h2 align="center">Not a creature was stirring&hellip;</h2>
<h3 align="center">by Jerrad Pierce</h3>
<blockquote><p>Minor corrections prompted by the Mo[ou]se team, who really want you to use the larger beast. &mdash; Jerrad 2009-12-02</p>
</blockquote>
<p>Not even a large and gangly <tt><a href="http://search.cpan.org/perldoc?Moose">Moose</a></tt>. As you are probably aware, <tt>Moose</tt> is a relatively nifty OO framework. However, it is somewhat hefty: 6,361 lines of code plus 14 dependencies (5,199 LOC).<sup><a href="#footnote_stats">1</a></sup></p>
<p>Most of its fans will tell you not to worry about that, and of course premature optimization is the root of all coal-stuffed stockings, but what if you want some shiny new toys that are a bit more svelte? Enter <tt><a href="http://search.cpan.org/perldoc?Mouse">Mouse</a></tt>. <tt>Mouse</tt> is "Moose without the antlers" i.e; lacking the thorny dependencies and added heft giving you a pain in the neck.</p>
<p><tt>Mouse</tt> clocks in at 5.7 kLOCs with no run-time dependencies. It <del>runs</del> <ins>starts-up</ins> 4+ times faster than <tt>Moose</tt> according to its authors, at the expense of implementing only <del>96%</del> <ins>a subset</ins> of its larger cousin's <ins>more superficial and sexier</ins> features.</p>
<p><ins>It can be a nicer, gentler introduction to the world of Moose. Like the cervine form, the rodent provides a simple means of providing accessors which are more explicit than a generalized AUTOLOAD mechanism, while still eliminating redundant code. Plenty of other fancy OO features come along for the ride, but no "metaprotocol stuff," which some would argue is the <span style="font-style: italic">raison d'&ecirc;tre</span> of <tt>Moose</tt>. </ins></p>
<p>You may be willing to make such a trade-off, but what if you're not writing the code, and instead run into some other module that foists <tt>Moose</tt> upon you? That author may or may not need all of <tt>Moose</tt>, but chances are good they don't. Well, if they were kind enough to use <tt><a href="http://search.cpan.org/perldoc?Any::Moose">Any::Moose</a></tt> <!-- formerly Squirrel --> instead, then the code will run with whichever is available, unless you force it by setting the currently undocumented <tt><span class="i">$ENV</span>{<span class="w">ANY_MOOSE</span>}</tt> to the implementation of your choice.</p>
<p>What if they weren't aware of <tt><span class="w">Any::Moose</span></tt>? You could edit their code (ick), make a local copy of <tt>Mouse</tt> and run <tt><span class="w">find</span> -<span class="w">type</span> <span class="w">f</span> | <span class="w">xargs</span> <span class="w">perl</span> -<span class="w">pi</span>~ <span class="k">-e</span> <span class="q">&#39;s/Mouse/Moose/g&#39;</span></tt> (very naughty), or get a little clever. With an <a href="Alias.pm">updated version of Package::Alias</a> that has not yet been accepted/released,<sup><a href="#footnote_patch">2</a></sup> it is possible to dress up your <tt>Mouse</tt> as a <tt>Moose</tt>.</p>
<pre><span class="c">Olive does not fly, and goes 'woof.'
Comet flies, and goes '.'

#%INC-luded files, nary a Moose in sight
$VAR1 = {
          'B.pm' => '/usr/lib/perl/5.10/B.pm',                                  
          'Carp.pm' => '/usr/share/perl/5.10/Carp.pm',
          'Config.pm' => '/usr/lib/perl/5.10/Config.pm',
          'Data/Dumper.pm' => '/usr/lib/perl/5.10/Data/Dumper.pm'
          'Exporter.pm' => '/usr/share/perl/5.10/Exporter.pm',                  
          'List/Util.pm' => '/usr/lib/perl/5.10/List/Util.pm',                  

          #Package::Alias keeping Moose from being loaded
          'Moose.pm' => '/usr/local/share/perl/5.10.0/Mouse.pm',
          'Mouse.pm' => '/usr/local/share/perl/5.10.0/Mouse.pm',
          'Mouse/Exporter.pm' => '/usr/local/share/perl/5.10.0/Mouse/Exporter.pm',
          'Mouse/Meta/Attribute.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Attribute.pm',                                                                  
          'Mouse/Meta/Class.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Class.pm',                                                                          
          'Mouse/Meta/Method/Accessor.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Method/Accessor.pm',                                                      
          'Mouse/Meta/Method/Constructor.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Method/Constructor.pm',                                                
          'Mouse/Meta/Method/Destructor.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Method/Destructor.pm',
          'Mouse/Meta/Module.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Module.pm',
          'Mouse/Meta/Role.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/Role.pm',
          'Mouse/Meta/TypeConstraint.pm' => '/usr/local/share/perl/5.10.0/Mouse/Meta/TypeConstraint.pm',
          'Mouse/Object.pm' => '/usr/local/share/perl/5.10.0/Mouse/Object.pm',  
          'Mouse/Util.pm' => '/usr/local/share/perl/5.10.0/Mouse/Util.pm',
          'Mouse/Util/TypeConstraints.pm' => '/usr/local/share/perl/5.10.0/Mouse/Util/TypeConstraints.pm',                                                      
          'Package/Alias.pm' => '/usr/local/share/perl/5.10.0/Package/Alias.pm',
          'Scalar/Util.pm' => '/usr/lib/perl/5.10/Scalar/Util.pm',              
          'XSLoader.pm' => '/usr/lib/perl/5.10/XSLoader.pm',
          'bytes.pm' => '/usr/share/perl/5.10/bytes.pm',
          'constant.pm' => '/usr/share/perl/5.10/constant.pm',
          'mro.pm' => '/usr/share/perl/5.10/mro.pm',                            
          'overload.pm' => '/usr/share/perl/5.10/overload.pm',
          'strict.pm' => '/usr/share/perl/5.10/strict.pm',
          'vars.pm' => '/usr/share/perl/5.10/vars.pm',
          'warnings.pm' => '/usr/share/perl/5.10/warnings.pm',                  
          'warnings/register.pm' => '/usr/share/perl/5.10/warnings/register.pm',
        };</span></pre>
<p>Unfortunately, because of the way <tt>Mouse</tt> is implemented, this magic comes at the cost of a little extra work, "<tt><span class="w">Any::Moose::Forcefully</span></tt>". Lines 6 through 20 could easily be inlined in our code, but are placed into a separate module to make it clear that you only need the BEGIN block once in your code, as early as possible, and it will supercede any later calls to <tt><span class="k">use</span> <span class="w">Moose</span></tt>. The use of an explicit <tt><span class="k">BEGIN</span></tt> for the class substitution clauses is key to enforce the proper order of module loading. All of these lines, except for number 7, are simply copied from <tt>Mouse</tt> itself, and amount to hardcoding a particular feature set.</p>
<p>Note that even if other code will compile correctly with <tt>Mouse</tt>, it's possible the code could be doing some deep introspection and you may end up with <acronym title="A reindeer who is a few marbles shy of a set">Chet</acronym> rather than <acronym title="A more savvy beast">Comet</acronym>. it is therefore recommended that you run the code's test suite against <tt>Mouse</tt> whether you force it through <tt><span class="w">Package::Alias</span></tt> or substituting <tt><span class="w">Any::Moose</span></tt>.</p>
<a name="mod1.pl" id="mod1.pl"></a><h2><a href="mod1.pl">mod1.pl</a></h2><pre>
<a name="package-Reindeer"></a>   1 <span class="k">package </span><span class="i">Reindeer</span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">Any::Moose::Forcefully</span><span class="sc">;</span> <span class="c">#All Mooses are Mouses</span>
   3 <span class="k">use</span> <span class="w">Moose</span><span class="sc">;</span>
   4 
   5 <span class="w">has</span> <span class="q">&#39;name&#39;</span>  <span class="cm">=&gt;</span> <span class="s">(</span><span class="w">is</span><span class="cm">=&gt;</span><span class="q">&#39;ro&#39;</span><span class="cm">,</span> <span class="w">isa</span><span class="cm">=&gt;</span><span class="q">&#39;Str&#39;</span><span class="cm">,</span>  <span class="w">default</span><span class="cm">=&gt;</span><span class="q">&#39;Comet&#39;</span><span class="s">)</span><span class="sc">;</span>
   6 <span class="w">has</span> <span class="q">&#39;sound&#39;</span> <span class="cm">=&gt;</span> <span class="s">(</span><span class="w">is</span><span class="cm">=&gt;</span><span class="q">&#39;ro&#39;</span><span class="cm">,</span> <span class="w">isa</span><span class="cm">=&gt;</span><span class="q">&#39;Str&#39;</span><span class="cm">,</span>  <span class="w">default</span><span class="cm">=&gt;</span><span class="q">&#39;&#39;</span><span class="s">)</span><span class="sc">;</span>
   7 <span class="w">has</span> <span class="q">&#39;flies&#39;</span> <span class="cm">=&gt;</span> <span class="s">(</span><span class="w">is</span><span class="cm">=&gt;</span><span class="q">&#39;ro&#39;</span><span class="cm">,</span> <span class="w">isa</span><span class="cm">=&gt;</span><span class="q">&#39;Bool&#39;</span><span class="cm">,</span> <span class="w">default</span><span class="cm">=&gt;</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
   8 
<a name="stats"></a>   9 <span class="k">sub </span><span class="m">stats</span> <span class="s">{</span>
  10     <span class="k">my</span> <span class="s">(</span><span class="i">$self</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
  11     <span class="k">printf</span><span class="s">(</span><span class="q">&quot;%s %s, and goes &#39;%s.&#39;\n&quot;</span><span class="cm">,</span>
  12 	   <span class="i">$self</span><span class="i">-&gt;name</span><span class="s">(</span><span class="s">)</span><span class="cm">,</span>
  13 	   <span class="s">(</span><span class="i">$self</span><span class="i">-&gt;flies</span> ? <span class="q">&#39;flies&#39;</span> <span class="co">:</span> <span class="q">&#39;does not fly&#39;</span><span class="s">)</span><span class="cm">,</span>
  14 	   <span class="i">$self</span><span class="i">-&gt;sound</span><span class="s">(</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span>
  15 <span class="s">}</span>
  16 
  17 <span class="n">1</span><span class="sc">;</span>
  18 
<a name="package-main"></a>  19 <span class="k">package </span><span class="i">main</span><span class="sc">;</span>
  20 <span class="k">use</span> <span class="w">Data::Dumper</span><span class="sc">;</span>
  21 <span class="w">import</span> <span class="w">Reindeer</span><span class="sc">;</span> <span class="c">#not use, package is in the same file</span>
  22 
  23 <span class="k">my</span> <span class="i">$Olive</span> = <span class="w">Reindeer</span><span class="w">-&gt;new</span><span class="s">(</span><span class="w">flies</span><span class="cm">=&gt;</span><span class="n">0</span><span class="cm">,</span> <span class="w">name</span><span class="cm">=&gt;</span><span class="q">&#39;Olive&#39;</span><span class="cm">,</span> <span class="w">sound</span><span class="cm">=&gt;</span><span class="q">&#39;woof&#39;</span><span class="s">)</span><span class="sc">;</span>
  24 <span class="k">my</span> <span class="i">$Comet</span> = <span class="w">Reindeer</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  25 
  26 <span class="i">$Olive</span><span class="i">-&gt;stats</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  27 <span class="i">$Comet</span><span class="i">-&gt;stats</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  28 
  29 <span class="k">print</span> <span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="w">Dumper</span> \<span class="i">%INC</span><span class="sc">;</span>
</pre>
<a name="Forcefully.pm" id="Forcefully.pm"></a><h2><a href="Forcefully.pm">Forcefully.pm</a></h2><pre>
<a name="package-Any::Moose::Forcefully"></a>   1 <span class="k">package </span><span class="i">Any::Moose::Forcefully</span><span class="sc">;</span>
   2 <span class="k">BEGIN</span><span class="s">{</span>
   3     <span class="k">use</span> <span class="w">Package::Alias</span> <span class="w">Moose</span> <span class="cm">=&gt;</span> <span class="w">Mouse</span><span class="sc">;</span>
   4 
   5     <span class="c">#Make Mouse&#39;s finicky internal checks happy...</span>
   6     <span class="w">Mouse::Exporter</span><span class="w">-&gt;setup_import_methods</span><span class="s">(</span>
   7 					  <span class="w">exporting_package</span><span class="cm">=&gt;</span><span class="q">&#39;Moose&#39;</span><span class="cm">,</span>
   8 					  
   9 					  <span class="c">#Alas the defaults live in Mouse...</span>
  10 					  <span class="w">as_is</span> <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qw(</span>
  11 							<span class="q">extends with</span>
  12 							<span class="q">has</span>
  13 							<span class="q">before after around</span>
  14 							<span class="q">override super</span>
  15 							<span class="q">augment  inner</span>
  16 						     <span class="q">)</span><span class="cm">,</span>
  17 						\<span class="i">&amp;Scalar::Util::blessed</span><span class="cm">,</span>
  18 						    \<span class="i">&amp;Carp::confess</span><span class="cm">,</span>
  19 						   <span class="s">]</span><span class="cm">,</span>
  20 					 <span class="s">)</span><span class="sc">;</span>
  21     <span class="c">#Otherwise we get</span>
  22     <span class="c">#The package Moose package does not use Mouse::Exporter at</span>
  23     <span class="c">#  /usr/local/share/perl/5.10.0/Mouse/Exporter.pm line 140</span>
  24     <span class="c">#    Mouse::Exporter::do_import(&#39;Moose&#39;) called at mod1.pl line 23</span>
  25     <span class="c">#    Reindeer::BEGIN() called at mod1.pl line 23</span>
  26     <span class="c">#    eval {...} called at mod1.pl line 23</span>
  27     <span class="c">#BEGIN failed--compilation aborted at mod1.pl line 23.</span>
  28 <span class="s">}</span>
  29 
  30 <span class="n">1</span><span class="sc">;</span>
</pre>
<p><a name="footnote_stats" id="footnote_stats"></a>1. As determined by <a href="http://cloc.sourceforge.net/">cloc</a> and <a href="http://deps.cpantesters.org/">CPAN Tester dependencies</a>.<br>
</p>
<p><a name="footnote_patch" id="footnote_patch"></a>2. I've submitted a <a href="https://rt.cpan.org/Ticket/Display.html?id=52314">patch</a> to <a href="Alias.pm">Package::Alias</a>, which is also generally useful for robustly aliasing packages and classes of any sort to another name. <p> My suggestion that <tt>Any::Moose</tt> <a href="https://rt.cpan.org/Ticket/Display.html?id=52336">be patched</a> to use <tt><span class="w">Package::Alias</span></tt> magic to make it a more general solution has not been embraced, but someone is welcome to produce a proper <tt><span class="w">Any::Moose::Forcefully</span></tt>/<tt><span class="w">MooseX::Hijack::WithMouse</span></tt>. <p> <ins>As an alternative to adopting the currently unofficial implementation of <tt><span class="w">Alias</span></tt>, and admittedly ugly <tt><span class="w">Any::Moose::Forcefully</span></tt> or something similar, you could use the following snippet suggested by one of <tt>Moose</tt>'s contributors:</ins><br>
<pre>
<a name="Moose::import"></a><span class="k">sub </span><span class="m">Moose::import</span> <span class="s">{</span> <span class="k">goto</span> <span class="i">&amp;Mouse::import</span> <span class="s">}</span>
<span class="i">$INC</span>{<span class="q">&quot;Moose.pm&quot;</span>} = <span class="n">1</span><span class="sc">;</span>
</pre>

</p>
<blockquote><p>See also <tt><a href="http://search.cpan.org/perldoc?Any::Moose::Convert">Any::Moose::Convert</a></tt>, created 2009-12-04</p>
</blockquote>
<div style="float: right; font-size: 10pt"><a href="mod1.pod">View Source (POD)</a></div><br />
</body>
</html>
